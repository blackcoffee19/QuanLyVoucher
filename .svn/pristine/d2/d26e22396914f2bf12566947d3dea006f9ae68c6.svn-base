using Base.Common;
using Microsoft.Win32;
using QuanLyVoucher.Globals;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Security.Principal;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace QuanLyVoucher
{
    static class Program
    {
        public static bool m_IsLoginAs = false;
        public static string m_Username = "";
        public static frmMain fMain;

        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        /// 

        private static bool IsUserAdministrator()
        {
            bool isAdmin;
            try
            {
                WindowsIdentity user = WindowsIdentity.GetCurrent();
                WindowsPrincipal principal = new WindowsPrincipal(user);
                isAdmin = principal.IsInRole(WindowsBuiltInRole.Administrator);
            }
            catch (UnauthorizedAccessException ex)
            {
                isAdmin = false;
            }
            catch (Exception ex)
            {
                isAdmin = false;
            }
            return isAdmin;
        }

        private static void handleCreateURLProtocol()
        {
            RegistryKey key = Registry.ClassesRoot.OpenSubKey("qlvc");  //open myApp protocol's subkey
            if (key == null)  //if the protocol is not registered yet...we register it
            {
                key = Registry.ClassesRoot.CreateSubKey("qlvc");
                key.SetValue(string.Empty, "URL: myApp Protocol");
                key.SetValue("URL Protocol", string.Empty);

                string strExeFilePath = System.Reflection.Assembly.GetExecutingAssembly().Location;
                key = key.CreateSubKey(@"shell\open\command");
                key.SetValue(string.Empty, strExeFilePath + " " + "%1");
                //%1 represents the argument - this tells windows to open this program with an argument / parameter
            }

            key.Close();

        }


        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            if (IsUserAdministrator())
            {
                handleCreateURLProtocol();
            }
            string[] args = Environment.GetCommandLineArgs();

            bool bTryAgain = true;

            while (bTryAgain)
            {
                bTryAgain = false;
                var dialog = new frmLogin(args);

                if (m_IsLoginAs)
                {
                    dialog = new frmLogin(true, m_Username);
                    m_IsLoginAs = false;
                }

                using (dialog)
                {
                    if (dialog.ShowDialog() != DialogResult.OK) return;

                    var font = new Font(Base.AppliBaseForm.Globals.Const.DefaultFont, Cast.ToInt(Base.AppliBaseForm.Globals.Const.DefaultFontSize));
                    DevExpress.Utils.AppearanceObject.DefaultFont = font;
                    DevExpress.Utils.AppearanceDefault.Empty.Font = font;

                    DevExpress.Skins.SkinManager.Default.RegisterAssembly(typeof(DevExpress.UserSkins.BonusSkins).Assembly);

                    fMain = new frmMain();
                    fMain.Show();

                    Application.Run(fMain);

                    //..
                    bTryAgain = fMain.bSignOut;
                }
            }

            try
            {
                clsPublicVar.Conn.Close();
            }
            catch { }
        }
    }
}
